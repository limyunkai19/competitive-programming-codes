// link: https://csacademy.com/ieeextreme-practice/task/exploitation/

#include <iostream>
#include <vector>

using namespace std;

int main() {
    int row, col, x, y;
    cin >> row >> col >> x >> y;

    vector<int> dpRow(row+1, 0), dpCol(col+1, 0);
    vector<vector<int>> sum(row+1, vector<int>(col+1, 0));
    for(int r = 1; r <= row; r++) {
        dpRow[r] = max(dpRow[r], dpRow[r-1]);
        for(int c = 1; c <= col; c++) {
            dpCol[c] = max(dpCol[c], dpCol[c-1]);

            cin >> sum[r][c];

            // minus first to prevent overflow
            sum[r][c] = sum[r][c] - sum[r-1][c-1] + sum[r][c-1] + sum[r-1][c];

            // check if can place x, y at r, c
            if(r >= x && c >= y) {
                int xySum = sum[r][c] - sum[r-x][c] - sum[r][c-y] + sum[r-x][c-y];
                dpRow[r] = max(dpRow[r], xySum);
                dpCol[c] = max(dpCol[c], xySum);
            }

            // check if can place y, x at r, c
            if(r >= y && c >= x) {
                int yxSum = sum[r][c] - sum[r-y][c] - sum[r][c-x] + sum[r-y][c-x];
                dpRow[r] = max(dpRow[r], yxSum);
                dpCol[c] = max(dpCol[c], yxSum);
            }
        }
    }

    int ans = 0;
    for(int r = 1; r <= row; r++) {
        for(int c = 1; c <= col; c++) {
            // check if can place x, y at r, c
            if(r >= x && c >= y) {
                int xySum = sum[r][c] - sum[r-x][c] - sum[r][c-y] + sum[r-x][c-y];
                ans = max(ans, xySum + max(dpRow[r-x], dpCol[c-y]));
            }

            // check if can place y, x at r, c
            if(r >= y && c >= x) {
                int yxSum = sum[r][c] - sum[r-y][c] - sum[r][c-x] + sum[r-y][c-x];
                ans = max(ans, yxSum + max(dpRow[r-y], dpCol[c-x]));
            }
        }
    }

    cout << ans << endl;

    return 0;
}
